let videoElement = document.getElementById('preview');
let canvasElement = document.createElement('canvas');
let canvasContext = canvasElement.getContext('2d');
let videoStream = null;
let lastScannedCode = null;
let scanningActive = true;

// TB listesi kontrol√º
if (typeof tbList === 'undefined') {
  console.error("tb-list.js y√ºklenmedi!");
  document.getElementById('status').textContent = "Hata: TB listesi y√ºklenemedi!";
  scanningActive = false;
}

// Cihazlarƒ± kontrol et
async function getCameraDevices() {
  try {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const videoDevices = devices.filter(device => device.kind === 'videoinput');
    return videoDevices;
  } catch (err) {
    console.error("Kameralar listelenirken hata olu≈ütu: ", err);
    document.getElementById('status').textContent = "Kamera eri≈üiminde hata!";
    scanningActive = false;
    return [];
  }
}

// Kamerayƒ± ba≈ülat
async function startCamera() {
  try {
    const videoDevices = await getCameraDevices();
    if (videoDevices.length === 0) {
      throw new Error("Kamera bulunamadƒ±");
    }

    // Arka kamerayƒ± bulmaya √ßalƒ±≈ü
    let backCamera = videoDevices.find(device => 
      device.label.toLowerCase().includes("back") || 
      (device.getCapabilities && device.getCapabilities().facingMode === "environment")
    );

    // Arka kamera yoksa ilk kamerayƒ± kullan
    if (!backCamera) {
      backCamera = videoDevices[0];
    }

    const stream = await navigator.mediaDevices.getUserMedia({
      video: { 
        deviceId: backCamera.deviceId,
        facingMode: "environment" // Mobil cihazlarda arka kamerayƒ± zorla
      }
    });

    videoElement.srcObject = stream;
    videoStream = stream;
    document.getElementById('status').textContent = "Kamera ba≈üarƒ±yla ba≈ülatƒ±ldƒ±. Taramaya hazƒ±r!";
    
    // Taramayƒ± ba≈ülat
    scanLoop();
  } catch (err) {
    console.error("Kamera ba≈ülatƒ±lƒ±rken hata olu≈ütu: ", err);
    document.getElementById('status').textContent = "Kamera ba≈ülatƒ±lamadƒ±. L√ºtfen izinleri kontrol edin.";
    scanningActive = false;
  }
}

// QR kodu √ß√∂z√ºmleme fonksiyonu
function scanQRCode() {
  if (!scanningActive || videoElement.videoWidth === 0 || videoElement.videoHeight === 0) {
    return null;
  }

  canvasElement.height = videoElement.videoHeight;
  canvasElement.width = videoElement.videoWidth;
  canvasContext.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);

  const imageData = canvasContext.getImageData(0, 0, canvasElement.width, canvasElement.height);
  const code = jsQR(imageData.data, canvasElement.width, canvasElement.height);

  if (code && code.data !== lastScannedCode) {
    lastScannedCode = code.data;
    return code.data;
  }
  return null;
}

// Tarama d√∂ng√ºs√º
function scanLoop() {
  if (!scanningActive) return;
  
  const scannedCode = scanQRCode();
  if (scannedCode) {
    processScannedCode(scannedCode);
  }
  
  requestAnimationFrame(scanLoop);
}

// Tarama sonucunu i≈üle
function processScannedCode(code) {
  console.log(`Taranan QR: ${code}`);
  document.getElementById('lastScanned').textContent = `üì¶ Taranan TB: ${code}`;

  if (tbList.includes(code)) {
    document.getElementById('status').textContent = `‚úÖ Ge√ßerli TB: ${code}`;
    document.getElementById('status').style.color = "green";
    document.getElementById('status').style.fontWeight = "bold";
  } else {
    document.getElementById('status').textContent = `‚ùå Ge√ßersiz TB: ${code}`;
    document.getElementById('status').style.color = "red";
    document.getElementById('status').style.fontWeight = "bold";
  }
}

// Uygulamayƒ± ba≈ülat
startCamera();